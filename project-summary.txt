# Scarlett Language Learning DApp

## Overview
A decentralized language learning application focused on song-based learning, supporting bidirectional learning between English and Mandarin Chinese.

## Tech Stack
- Framework: Next.js 15.1.7
- Runtime: Bun
- Language: TypeScript
- UI: Tailwind CSS + shadcn/ui
- State Management: Zustand

## Web3 Integration
- Authentication: Privy (web2 + web3 auth with embedded wallets)
- Storage: 
  - Tableland (public deck data via REST API)
  - Irys.xyz (user progress persistence)
- Messaging: XMTP (question validation and chat)
- Access Control: Unlock Protocol (subscription-based chat access)
- Social: Farcaster Frames v2 integration

## Routing Structure

### Base Routes
```
/                   # Home page with song listings and language selection
/chat              # Chat interface (requires auth)
```

### Song Routes (Localized)
```
/[locale]/songs/[id]                  # Song details page
/[locale]/songs/[id]/play             # Song player with synchronized lyrics
/[locale]/songs/[id]/questions        # Multiple choice questions
/[locale]/songs/[id]/questions/complete # Completion page with stats and sharing
```

### API Routes
```
/api/frames/[locale]/[id]             # Farcaster Frame endpoints
/api/frames/[locale]/[id]/answer      # Frame answer handling
```

## Updated Folder Structure
```
src/
├── app/                    # Next.js App Router pages
│   ├── [locale]/          # i18n routes (en|zh)
│   │   ├── page.tsx       # Home page
│   │   └── songs/        # Song-related pages
│   │       └── [id]/     # Dynamic song routes
│   │           ├── page.tsx           # Song details
│   │           ├── play/              # Song player
│   │           │   └── page.tsx       
│   │           └── questions/         # Question flow
│   │               ├── page.tsx       # Questions interface
│   │               └── complete/      # Completion page
│   │                   └── page.tsx
│   ├── chat/             # Chat interface
│   │   └── page.tsx
│   └── api/              # API routes
│       └── frames/       # Farcaster Frame endpoints
│           └── [locale]/ 
│               └── [id]/
│                   ├── route.ts      # Frame initial state
│                   └── answer/       # Frame interaction
│                       └── route.ts
├── components/            # Shared components
├── config/               # App configuration
├── hooks/                # Custom React hooks
├── lib/                  # Shared utilities
│   ├── idb/             # IndexedDB utilities
│   └── constants/       # App constants
├── services/            # External service integrations
│   ├── privy/          # Privy auth integration
│   ├── irys/           # Irys storage integration
│   └── xmtp/           # XMTP messaging integration
├── stores/              # Zustand stores
│   ├── authStore.ts    # Auth state management
│   └── questionStore.ts # Question progress tracking
└── types/              # TypeScript type definitions
```

## State Management

### authStore.ts
```typescript
interface AuthState {
  isAuthenticated: boolean;
  user: PrivyUser | null;
  wallet: string | null;
  language: 'en' | 'zh';
  messageCredits: number;
  actions: {
    setUser: (user: PrivyUser) => void;
    setWallet: (address: string) => void;
    setLanguage: (lang: 'en' | 'zh') => void;
    decrementCredits: () => void;
  }
}
```

### questionStore.ts
```typescript
interface QuestionProgress {
  songId: string;
  questionId: string;
  correct: boolean;
  timestamp: number;
}

interface QuestionState {
  progress: Record<string, QuestionProgress>;
  actions: {
    saveProgress: (progress: QuestionProgress) => void;
    loadProgress: () => Promise<void>;
    syncToIrys: () => Promise<void>;
  }
}
```

## Core Features

### Authentication
- Web2 and Web3 authentication via Privy
- Automatic embedded wallet creation for Web2 users
- Persistent auth state management

### Question System
- Bidirectional learning (EN->ZH and ZH->EN)
- Questions loaded from Tableland (public, read-only)
- Question validation via XMTP messaging
- Progress tracking in IndexedDB
- Periodic progress backup to Irys

### Chat System
- XMTP-based messaging
- Limited to /chat and question pages
- 10 free messages per day
- Unlimited access via Unlock Protocol subscription
- No local message storage (uses XMTP's built-in history)

### Data Storage
- Tableland Schema:
```sql
CREATE TABLE song_v2_8453_22 (
  song_title text,
  song_title_translated text,
  cover_img_cid text,
  thumb_img_cid text,
  language_1 text,
  language_2 text,
  lyrics_cid text,
  questions_cid_1 text,
  questions_cid_2 text,
  apple_id text,
  spotify_id text,
  youtube_id text,
  odyssey_id text,
  tidal_id text,
  deezer_id text,
  genius_id text,
  artist_name text,
  song_duration integer,
  unique_words_1 integer,
  unique_words_2 integer,
  cefr_level integer,
  words_per_second numeric,
  audio_cid text,
  rating text
)
```

### Farcaster Frames Integration
- Frame endpoints for question sharing
- Language-specific routes:
  - /en/songs/[id]/questions (English learners)
  - /zh/songs/[id]/questions (Chinese learners)
- Interactive question flow:
  1. Question display with options
  2. Answer feedback
  3. CTA after 3 questions

## User Flow
1. User visits song page
2. Language detection determines question set
3. First question attempt triggers auth if needed
4. Questions validated via XMTP bot
5. Progress saved to IndexedDB
6. After 10 questions, prompt for Irys backup
7. Chat/messaging limited by daily credits
8. Subscription available for unlimited access

## Development Notes
- XMTP only initialized on relevant pages
- Tableland accessed via REST API (no SDK required)
- IDB used for local progress tracking
- Irys for decentralized progress backup
- Frame endpoints support both learning directions

## Page-Specific Features

### Song Player (/[locale]/songs/[id]/play)
- Audio player integration with IPFS-hosted MP3
- Synchronized lyrics display
- Lyrics loaded from IPFS CID (lyrics_cid)
- Progress tracking for song completion
- Language toggle for lyrics display

### Questions Flow
- Main questions page (/[locale]/songs/[id]/questions)
  - Multiple choice interface
  - XMTP integration for validation
  - Progress tracking
  - Auth gate after first question

- Completion page (/[locale]/songs/[id]/questions/complete)
  - Score summary
  - Progress visualization
  - Share to Farcaster button
  - Option to save progress to Irys
  - Suggestions for next song based on performance
